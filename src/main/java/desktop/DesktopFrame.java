package desktop;

import impl.algorithms.facades.Evolution;
import impl.algorithms.genetics.operators.alterer.types.CrossoverTypes;
import impl.algorithms.genetics.operators.alterer.types.FitnessTypes;
import impl.algorithms.genetics.operators.alterer.types.MutatorTypes;
import impl.algorithms.genetics.operators.alterer.types.SelectorTypes;
import impl.controllers.BusinessController;
import impl.controllers.MatrixController;
import impl.controllers.NetworkController;
import impl.entities.Company;
import impl.entities.Network;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

public class DesktopFrame extends javax.swing.JFrame {
    private final static NetworkController networkController = new NetworkController();
    private final static BusinessController businessController = new BusinessController();
    
    private Network network;
    private Company company;
    private Evolution evolution;
    private DrawPanel drawPanel;

    public DesktopFrame() {
        initComponents();
        initVariables();
        initDrawPanel();
    }
    
    private void initDrawPanel() {
        drawPanel = new DrawPanel(this, network, company);
        drawPanel.setBackground(Color.white);
        drawPanel.setSize(mapPanel.getSize());
        mapPanel.add(drawPanel);
        setVisible(true);
        
        try {
           drawPanel.setMapImg(ImageIO.read(new File("src/main/resources/map.png")));
        } catch (IOException ex) {
            Logger.getLogger(DesktopFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initVariables() {
        network = networkController.createNetwork(0, new ArrayList());
        company = businessController.createCompany();
        evolution = Evolution.create(network, company, FitnessTypes.RANDOM_WEIGHT_FITNESS).builder();
    }
    
    public synchronized boolean isAddCityMode() {
        return addCityToggleButton.isSelected();
    }
    
    public synchronized boolean isAddRouteMode() {
        return addRouteToggleButton.isSelected();
    }
    
    public synchronized void log(String s) {
        logTextArea.setText(logTextArea.getText() + "\n" + s);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel = new javax.swing.JPanel();
        evolutionPanel = new javax.swing.JPanel();
        crossoverComboBox = new javax.swing.JComboBox<>();
        mutatorComboBox = new javax.swing.JComboBox<>();
        selectorComboBox = new javax.swing.JComboBox<>();
        populationSizeSpinner = new javax.swing.JSpinner();
        populationSizeLabel = new javax.swing.JLabel();
        generationSizeLabel = new javax.swing.JLabel();
        generationSpinner = new javax.swing.JSpinner();
        evolveButton = new javax.swing.JButton();
        addCityToggleButton = new javax.swing.JToggleButton();
        addRouteToggleButton = new javax.swing.JToggleButton();
        logPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Air Network Optimization");
        setBackground(new java.awt.Color(255, 255, 255));
        setName("frame"); // NOI18N

        mapPanel.setBackground(new java.awt.Color(204, 255, 204));
        mapPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout mapPanelLayout = new javax.swing.GroupLayout(mapPanel);
        mapPanel.setLayout(mapPanelLayout);
        mapPanelLayout.setHorizontalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 555, Short.MAX_VALUE)
        );
        mapPanelLayout.setVerticalGroup(
            mapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        evolutionPanel.setBackground(new java.awt.Color(255, 255, 255));
        evolutionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Evolution"));

        crossoverComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SINGLE_POINT_CROSSOVER", "MULTI_POINT_CROSSOVER", "PARTIALLY_MATCHED_CROSSOVER", "UNIFORM_CROSSOVER" }));
        crossoverComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                crossoverComboBoxItemStateChanged(evt);
            }
        });

        mutatorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MUTATOR", "SWAP_MUTATOR" }));
        mutatorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mutatorComboBoxItemStateChanged(evt);
            }
        });

        selectorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ROULETTE_WHEEL_SELECTOR", "TOURNAMENT_SELECTOR", "BOLTZMANN_SELECTOR", "EXPONENTIAL_RANK_SELECTOR", "LINEAR_RANK_SELECTOR", "STOCHASTIC_UNIVERSAL_SELECTOR", "MONTE_CARLO_SELECTOR", "TRUNCATION_SELECTOR" }));
        selectorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectorComboBoxItemStateChanged(evt);
            }
        });

        populationSizeSpinner.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                populationSizeSpinnerInputMethodTextChanged(evt);
            }
        });

        populationSizeLabel.setText("Population size:");

        generationSizeLabel.setText("Generations:");

        evolveButton.setText("Evolve");
        evolveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                evolveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout evolutionPanelLayout = new javax.swing.GroupLayout(evolutionPanel);
        evolutionPanel.setLayout(evolutionPanelLayout);
        evolutionPanelLayout.setHorizontalGroup(
            evolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(evolutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(evolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(evolveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(crossoverComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mutatorComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectorComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, evolutionPanelLayout.createSequentialGroup()
                        .addComponent(populationSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(populationSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(evolutionPanelLayout.createSequentialGroup()
                        .addComponent(generationSizeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        evolutionPanelLayout.setVerticalGroup(
            evolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(evolutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(crossoverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutatorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(evolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(populationSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(populationSizeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(evolutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generationSizeLabel)
                    .addComponent(generationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(evolveButton)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        addCityToggleButton.setText("Add City Mode");
        addCityToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addCityToggleButtonItemStateChanged(evt);
            }
        });

        addRouteToggleButton.setText("Add Route Mode");
        addRouteToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                addRouteToggleButtonItemStateChanged(evt);
            }
        });

        logPanel.setBackground(new java.awt.Color(255, 255, 255));
        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(mapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addCityToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addRouteToggleButton))
                            .addComponent(evolutionPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addCityToggleButton)
                            .addComponent(addRouteToggleButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(evolutionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(mapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crossoverComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_crossoverComboBoxItemStateChanged
        evolution.alterer(CrossoverTypes.valueOf(crossoverComboBox.getSelectedItem().toString()), MutatorTypes.valueOf(mutatorComboBox.getSelectedItem().toString()));
    }//GEN-LAST:event_crossoverComboBoxItemStateChanged

    private void mutatorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mutatorComboBoxItemStateChanged
        evolution.alterer(CrossoverTypes.valueOf(crossoverComboBox.getSelectedItem().toString()), MutatorTypes.valueOf(mutatorComboBox.getSelectedItem().toString()));
    }//GEN-LAST:event_mutatorComboBoxItemStateChanged

    private void selectorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectorComboBoxItemStateChanged
        evolution.selector(SelectorTypes.valueOf(selectorComboBox.getSelectedItem().toString()));
    }//GEN-LAST:event_selectorComboBoxItemStateChanged

    private void populationSizeSpinnerInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_populationSizeSpinnerInputMethodTextChanged
        evolution.initialPopulation((int) populationSizeSpinner.getValue());
    }//GEN-LAST:event_populationSizeSpinnerInputMethodTextChanged

    private void evolveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_evolveButtonActionPerformed
       logTextArea.setText(evolution.buildEngine().evolve((int) generationSpinner.getValue()).toString());
    }//GEN-LAST:event_evolveButtonActionPerformed

    private void addCityToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addCityToggleButtonItemStateChanged
        addRouteToggleButton.setSelected(false);
    }//GEN-LAST:event_addCityToggleButtonItemStateChanged

    private void addRouteToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_addRouteToggleButtonItemStateChanged
       addCityToggleButton.setSelected(false);
    }//GEN-LAST:event_addRouteToggleButtonItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DesktopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DesktopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DesktopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesktopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DesktopFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton addCityToggleButton;
    private javax.swing.JToggleButton addRouteToggleButton;
    private javax.swing.JComboBox<String> crossoverComboBox;
    private javax.swing.JPanel evolutionPanel;
    private javax.swing.JButton evolveButton;
    private javax.swing.JLabel generationSizeLabel;
    private javax.swing.JSpinner generationSpinner;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JPanel mapPanel;
    private javax.swing.JComboBox<String> mutatorComboBox;
    private javax.swing.JLabel populationSizeLabel;
    private javax.swing.JSpinner populationSizeSpinner;
    private javax.swing.JComboBox<String> selectorComboBox;
    // End of variables declaration//GEN-END:variables
}
